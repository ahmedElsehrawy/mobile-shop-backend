### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Category {
  Product: [Product!]!
  id: Int!
  name: String!
}

type Mutation {
  createCategory(input: newCategoryInput!): Category!
  createProduct(input: createProductInput!): Product!
  createSoldProduct(input: createSoldProductInput!): soldProduct!
  deleteCategory(input: deleteCategoryInput!): Product!
  deleteProduct(input: deleteProductInput!): Product!
  sellProduct(input: sellProductInput!): Product!
  updateProduct(input: updateProductInput!, where: updateProductWhere!): Product!
}

type Product {
  category: category!
  categoryId: Int!
  code: String!
  count: Int!
  end_price: Float!
  id: Int!
  name: String!
  original_price: Float!
  start_price: Float!
}

type Query {
  categories: [Category!]!
  getOneProduct(where: getOneProductInput!): Product!
  products(skip: Int!, take: Int!, where: fliterProductsInput): products!
  soldProducts(input: inputObjectType!): soldProducts!
  soldProductsCharts: soldProductsCharts!
}

type category {
  Product: [Product!]!
  id: Int!
  name: String!
}

input createProductInput {
  categoryId: Int!
  code: String!
  count: Int!
  end_price: Float!
  name: String!
  original_price: Float!
  start_price: Float!
}

input createSoldProductInput {
  productId: Int!
  quantity: Int!
  salePrice: Int!
}

input deleteCategoryInput {
  id: Int!
}

input deleteProductInput {
  id: Int!
}

input fliterProductsInput {
  categoryId: Int
  count: Int
}

input getOneProductInput {
  id: Int!
}

input inputObjectType {
  createdAt: String
}

input newCategoryInput {
  name: String!
}

type products {
  count: Int!
  nodes: [Product!]!
}

input sellProductInput {
  count: Int!
  id: Int!
}

type soldProduct {
  createdAt: String!
  id: Int!
  product: Product!
  productId: Int!
  quantity: Int!
  salePrice: Int!
}

type soldProducts {
  nodes: [soldProduct!]!
  total: Int!
  totalOriginalPrice: Int!
}

type soldProductsCharts {
  soldProuctsCharts: [soldProductsChartsField!]!
}

type soldProductsChartsField {
  from: String!
  to: String!
  totalOriginalPrice: Int!
  totalSaledPrice: Int!
}

input updateProductInput {
  categoryId: Int
  code: String
  count: Int
  end_price: Float
  name: String
  original_price: Float
  start_price: Float
}

input updateProductWhere {
  id: Int!
}